name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  # Nx Cloud configuration
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 3
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  
  # AWS Configuration
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  # Terraform Configuration - will be set dynamically after AWS authentication
  TF_WORKSPACE: ${{ github.ref_name == 'main' && 'default' || 'dev' }}

jobs:
  # Job 1: Main CI - Lint, Format, Plan
  main:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform Environment
        uses: ./.github/actions/setup-terraform
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Plan Terraform (Cluster)
        run: npx nx run cluster:terraform-plan --configuration=stable

      - name: Upload Terraform Plans
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans
          path: |
            packages/cluster/tfplan
          retention-days: 1

  # Job 3: Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [main]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Setup Terraform Environment
        uses: ./.github/actions/setup-terraform
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Plans
        uses: actions/download-artifact@v4
        with:
          name: terraform-plans

      - name: Deploy Cluster Infrastructure
        run: npx nx run cluster:terraform-apply --configuration=stable

  # Job 4: Cleanup (manual trigger for destroy)
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: Setup Terraform Environment
        uses: ./.github/actions/setup-terraform
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Infrastructure
        run: |
          npx nx run cluster:terraform-destroy
          npx nx run setup:terraform-destroy
