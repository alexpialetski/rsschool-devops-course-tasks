name: Manual Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      project:
        description: 'Project to target'
        required: true
        default: 'setup'
        type: choice
        options:
          - setup
          - cluster
      environment:
        description: 'Environment to target'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - default

env:
  # AWS Configuration
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Terraform Configuration - will be set dynamically after AWS authentication
  TF_WORKSPACE: ${{ github.event.inputs.environment }}

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and AWS
        id: node-aws-setup
        uses: ./.github/actions/setup-node-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform Environment
        uses: ./.github/actions/setup-terraform
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-account-id: ${{ steps.node-aws-setup.outputs.aws-account-id }}

      - name: Execute Terraform Action
        run: |
          case "${{ github.event.inputs.action }}" in
            "plan")
              echo "Planning ${{ github.event.inputs.project }}..."
              npx nx run ${{ github.event.inputs.project }}:terraform-plan
              ;;
            "apply")
              echo "Applying ${{ github.event.inputs.project }}..."
              CONFIGURATION=${{ github.event.inputs.environment }}
              if [ "$CONFIGURATION" == "dev" ]; then
                npx nx run ${{ github.event.inputs.project }}:terraform-apply
              else
                npx nx run ${{ github.event.inputs.project }}:terraform-apply --configuration=stable
              fi
              ;;
            "destroy")
              echo "Destroying ${{ github.event.inputs.project }}..."
              npx nx run ${{ github.event.inputs.project }}:terraform-destroy
              ;;
          esac
